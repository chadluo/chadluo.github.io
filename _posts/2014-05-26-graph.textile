---
layout: post
title: "圖相關算法筆記"
category: generic
date: 2014-05-26 13:19:09
---

圖由節點與邊組成。一個節點連接若干條邊，一條邊連接兩個節點。若兩個節點通過一條邊連接，則稱其爲相鄰。

圖大致分兩類：地圖與查找樹。前者多爲有權圖，需要考慮邊的權重；後者多爲樹，重點在於整棵樹的拓撲結構。

地圖上常見的需求是找到一棵滿足需求的通路。最廣泛使用的思路是，使用一個含有節點的集合，每次我們從集合中取出一個點，然後把所有與該節點相鄰的節點推入集合。不同的圖搜索算法區別即在於使用的集合不同。最簡單的 BFS 和 DFS 分別使用隊列與棧。對有權圖則可以使用優先隊列，將從起點至該點的最低成本作爲節點的權重推入隊列，即構成了可以保證得到最優解的 Uniform Cost。在優先隊列的基礎上引入 Heuristic，估計每個點到重點的距離作爲權重相加，即構成了可以提高效率的 A*。如果採用隨機隊列，則可以用於生成迷宮。

樹往往不關注邊，而是在節點內通過指針或引用指向其它節點以示相鄰關係。

最簡單的樹是沒有分叉的鏈表，每個節點含有自己的值以及指向下一個節點的指針，調用指針即獲得下一個節點。在此基礎上可以設計複雜的數據域，可以添加一個指向母節點的指針構成雙向鏈表，也可以將末位元素的指針指向初始元素構成 circular buffer。鏈表有較佳的遍歷速度與添加、刪除元素的性能，但隨機讀取較慢。

對於一個鏈表，隨機訪問的平均遍歷深度普遍要達到鏈表長度的一半。爲了降低遍歷深度提高效率，我們引入二叉樹。二叉樹中每個節點有兩個指向子節點的指針。理想情況下一棵二叉樹中有儘可能多的節點兩個指針都非空，整棵樹深度最淺，平均遍歷深度可以降至 log(n/2)/2。

最簡單的二叉樹的排法是，對於每個節點，左子節點的值小於該節點，右子節點的值大於該節點。根節點大致處於所有值中位數的位置，每次比較並取子節點可以快速地從剩下的值中砍掉約一半的值。堆純屬異端。